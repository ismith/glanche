#!/bin/bash
shopt -s extglob
set -e

# Partial implementation of `blanche`, as a wrapper for `gam`. See docs() for
# details. Licensed under the MIT License.

config_file=~/.glanche

function gam_cmd() {
    if [[ $DRY_RUN ]]; then
        echo "gam $@"
    else
        gam $@
    fi
}

# Stub function handling user aliasing; you can override it in ~/.glanche if you
# want
function process_user() {
    local str=$1

    case $str in
      # demoalias) echo "somedemoemail@example.com" ;;
      *) echo $str ;;
    esac
}

# This needs to be a configurable default domain.
function process_list() {
    case $1 in
        *@* ) echo $1;;
        *   ) echo "${1}@${default_domain}";;
    esac
}

# - show_lists and docs do not require that $list be set, but all other
#   sub-commands ('verbs') do
# - if no verb is set, list may be empty
# - list may not contain a space
function validate_list() {
    if [[ $verb != 'show_lists' && $verb != 'docs' && $verb != '' ]]; then
        if [[ ! "$list" ]]; then
            echo "\$list must be set but is not."
            exit 1
        fi
        if [[ "$list" =~ ' ' ]]; then
            echo "\$list: '${list}' contains a space, something went wrong in arg parsing."
            exit 1
        fi
    fi
}

function members () {
    if [[ "$verbose" ]]; then
      processor='cat'
    else
      processor='cut -d, -f 3'
    fi

    gam_cmd print group-members group $list \
        | $processor
}

function info() {
    gam_cmd info group $list
}

# add_member takes in a comma-separated list of members (or a single member) and
# adds them to the list
function add_member() {
    local input=$1
    local member=''

    for member in $(echo $input | tr "," " "); do
      member=$(process_user $member)
      gam_cmd update group $list add member user $member
    done
}

function delete_member() {
    local member=$(process_user $1)

    gam_cmd update group $list remove member user $member
}

function create_group() {
    gam_cmd create group $list \
        allow_external_members true message_moderation_level moderate_none \
        who_can_post_message anyone_can_post is_archived true
}

function rename_group() {
    local newemail=$1

    gam_cmd update group $list email $newemail
}

function delete_group() {
    local confirm=''

    read -p "Deleting $list: are you sure (y/n)? " -n 1 confirm
    echo
    case "$confirm" in
      y|Y ) echo "Ok." ; gam_cmd delete group $list ;;
      n|N ) echo "Cancelling." ;;
      * ) echo "Invalid response." ; delete_group;;
    esac
}

function show_lists() {
    gam_cmd print groups
}

function docs() {
    cat <<-END
glanche is a wrapper for gam (https://github.com/jay0lee/GAM) in the vein of MIT
Athena's blanche

Usage: glanche [options] listname

Options are:
-v | --verbose # only for -m
-m | --members
-i | --info
-a | --add-members
-d | --delete-members
-C | --create
-R | --rename
-D | --delete-list # will ask for y/n confirmation
-L | --show-list # list all the lists gam knows of
-n | --dry-run # print the gam command instead of running it
--create-config # create a config file
END

}

function create_config() {
    local default_domain=''

    if [[ -f $config_file ]]; then
        echo "We can't create a config file for you, ${config_file} already exists."
        exit 1
    fi

    read -p "What default domain do you want (e.g, example.com)? " default_domain

    cat > $config_file <<-END
# This is a glanche config file. It has two components: a default_domain, and
# an
# optional set of user aliases.

default_domain=\${default_domain:-'$default_domain'}

function process_user() {
    local str=$1

    case $str in
        demoalias) echo 'somedemoemail@example.com';;
        *) echo $str
    esac
}
END

    echo "Config file created at ${config_file}; if you want, add aliases to the process_user() function."
}

### Main
for arg in "$@"; do
    shift
    case "$arg" in
        "--members" ) set -- "$@" "-m" ;;
        "--info" ) set -- "$@" "-i" ;;
        "--add-member" ) set -- "$@" "-a" ;;
        "--delete-member" ) set -- "$@" "-d" ;;
        "--create" ) set -- "$@" "-C" ;;
        "--rename" ) set -- "$@" "-R" ;;
        "--delete-list" ) set -- "$@" "-D" ;;
        "--show-lists" ) set -- "$@" "-L" ;;
        "--dry-run" ) set -- "$@" "-n" ;;
        "--verbose" ) set -- "$@" "-v" ;;
        "--help" ) set -- "$@" "-h" ;;
        "--create-config" ) create_config ; exit 0 ;;
        *) set -- "$@" "$arg" ;;
    esac
done

OPTIND=1
while getopts "mia:d:CR:DnLvh" opt; do
    verb='';
    list='';
    arg=''

    case $opt in
        m) verb='members';;
        i) verb='info' ;;
        a) verb='add_member'; arg=$OPTARG;;
        d) verb='delete_member'; arg=$OPTARG;;
        C) verb='create_group';;
        R) verb='rename_group'; arg=$(process_list $OPTARG);;
        D) verb='delete_group';;
        L) verb='show_lists';;
        n) DRY_RUN=1;;
        v) verbose=1;;
        h) verb='docs';;
    esac
done
shift $(expr $OPTIND - 1)
list="$@"

if ( ! hash gam 2>/dev/null ); then
    echo "gam not found in PATH; make sure it's installed."
    exit 1
fi

if [[ ! -f $config_file ]]; then
    echo "No config file found - please create one by calling glanche with --create-config"
    exit 1
else
    source $config_file
fi

validate_list $list
list=$(process_list $list)

# Default, no command/verb:
# - if a list is provided, run -m to list the members for the given list
# - otherwise, print docs
if [[ ! "$verb" ]]; then
  if [[ "$arg" != '' ]]; then
    members $arg
  else
    docs
  fi
else
  $verb $arg
fi
