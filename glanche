#!/bin/bash
shopt -s extglob
set -e

# Partial implementation of `blanche`, as a wrapper for `gam`.
#
# [x] -m | --members
# [x] -v | --verbose
# [x] -i | --info
# [x] -a | --add-member
# [x] -d | --delete-member
# [ ] -f | --filename # ?
# [x] -C | --create
# [x] -R | --rename
# [x] -D | --delete-list
# [x] -L | --show-lists
# [ ] --show-config
# [x] -n | --dry-run
# [x] expand lists - gam expects foo@example.com, but we can assume @example.com

# [x] add_member should accept a comma-separated list
# [ ] no-args: opts
# [x] long opts
# [ ] domain: configurable
# [ ] aliases: configurable
# [ ] docs
# [x] validate that list is not empty, and contains no spaces
# [x] require confirmation for delete-list
# [ ] make -m default

function gam_cmd() {
    if [[ $DRY_RUN ]]; then
        echo "gam $@"
    else
        gam $@
    fi
}

# This function will handle config of user aliasing - coming soon. For now, it
# just takes a string arg and returns it.
function process_user() {
    local str=$1

    case $str in
        *           ) echo ${str};;
    esac
}

# This needs to be a configurable default domain.
function process_list() {
    case $1 in
        *@* ) echo $1;;
        *   ) echo "${1}@projectalloy.org";;
    esac
}

# - show_lists does not require that $list be set, but all other sub-commands ('verbs') do
# - list may not contain a space
function validate_list() {
    if [[ $verb != 'show_lists' ]]; then
        if [[ ! "$list" ]]; then
            echo "\$list must be set but is not."
            exit 1
        fi
        if [[ "$list" =~ ' ' ]]; then
            echo "\$list: '${list}' contains a space, something went wrong in arg parsing."
            exit 1
        fi
    fi
}

function members () {
    if [[ "$verbose" ]]; then
      processor='cat'
    else
      processor='cut -d, -f 3'
    fi

    gam_cmd print group-members group $list \
        | $processor
}

function info() {
    gam_cmd info group $list
}

# add_member takes in a comma-separated list of members (or a single member) and
# adds them to the list
function add_member() {
    local input=$1
    local member=''

    for member in $(echo $input | tr "," " "); do
      member=$(process_user $member)
      gam_cmd update group $list add member user $member
    done
}

function delete_member() {
    local member=$(process_user $1)

    gam_cmd update group $list remove member user $member
}

function create_group() {
    gam_cmd create group $list \
        allow_external_members true message_moderation_level moderate_none \
        who_can_post_message anyone_can_post is_archived true
}

function rename_group() {
    local newemail=$1

    gam_cmd update group $list email $newemail
}

function delete_group() {
    local confirm=''

    read -p "Deleting $list: are you sure (y/n)? " -n 1 confirm
    echo
    case "$confirm" in
      y|Y ) echo "Ok." ; gam_cmd delete group $list ;;
      n|N ) echo "Cancelling." ;;
      * ) echo "Invalid response." ; delete_group;;
    esac
}

function show_lists() {
    gam_cmd print groups
}

### Main
for arg in "$@"; do
    shift
    case "$arg" in
        "--members" ) set -- "$@" "-m" ;;
        "--info" ) set -- "$@" "-i" ;;
        "--add-member" ) set -- "$@" "-a" ;;
        "--delete-member" ) set -- "$@" "-d" ;;
        "--create" ) set -- "$@" "-C" ;;
        "--rename" ) set -- "$@" "-R" ;;
        "--delete-list" ) set -- "$@" "-D" ;;
        "--show-lists" ) set -- "$@" "-L" ;;
        "--dry-run" ) set -- "$@" "-n" ;;
        "--verbose" ) set -- "$@" "-v" ;;
        *) set -- "$@" "$arg" ;;
    esac
done

OPTIND=1
while getopts "mia:d:CR:DnLv" opt; do
    verb='';
    list='';
    arg=''

    case $opt in
        m) verb='members';;
        i) verb='info' ;;
        a) verb='add_member'; arg=$OPTARG;;
        d) verb='delete_member'; arg=$OPTARG;;
        C) verb='create_group';;
        R) verb='rename_group'; arg=$(process_list $OPTARG);;
        D) verb='delete_group';;
        L) verb='show_lists';;
        n) DRY_RUN=1;;
        v) verbose=1;;
    esac
done
shift $(expr $OPTIND - 1)
list="$@"

validate_list $list
list=$(process_list $list)

if [[ "$verb" ]]; then
    $verb $arg
else
    # TODO: docs
    echo "TODO: docs"
fi
